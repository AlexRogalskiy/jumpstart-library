kind: DeploymentConfig
apiVersion: apps.openshift.io/v1
metadata:
  name: kafka-producer
  labels:
    app: kafka-producer
spec:
  strategy:
    type: Rolling
    rollingParams:
      updatePeriodSeconds: 1
      intervalSeconds: 1
      timeoutSeconds: 600
      maxUnavailable: 25%
      maxSurge: 25%
    resources: {}
    activeDeadlineSeconds: 21600
  triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
          - kafka-producer
        from:
          kind: ImageStreamTag
          name: 'kafka-producer:latest'
  replicas: 1
  revisionHistoryLimit: 5
  test: false
  selector:
    app: kafka-producer
    deploymentconfig: kafka-producer
  template:
    metadata:
      labels:
        app: kafka-producer
        deploymentconfig: kafka-producer
    spec:
      containers:
        - name: kafka-producer
          image: kafka-producer:latest
          ports:
            - containerPort: 8080
              protocol: TCP
          env:
            - name: DB_HOST
              value: "smartcity-db-service"
            - name: DB_NAME
              valueFrom:
                  secretKeyRef:
                    name: postgresql
                    key: database-name
            - name: DB_PASSWORD
              valueFrom:
                  secretKeyRef:
                    name: postgresql
                    key: database-password
            - name: DB_USER
              valueFrom:
                  secretKeyRef:
                    name: postgresql
                    key: database-user
            - name: KAFKA_CONSUMER_GROUP_ID
              value: event_consumer_group
            - name: KAFKA_ENDPOINT
              value: core-kafka-kafka-bootstrap:9092
            - name: KAFKA_TOPIC
              value: lpr
            - name: TABLE_NAME
              value: event
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: Always
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      schedulerName: default-scheduler
